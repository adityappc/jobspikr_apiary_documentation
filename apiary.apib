FORMAT: 1A
HOST: https://api.jobspikr.com/v2

# Jobspikr API


Jobspikr API helps you interact and use the data provided by Jobspikr. 

There are two APIs here

* Job Search API - search for jobs based on various criteria.

* Job Status API - check if a particular job consumed earlier is still live and posted on the source website.

This document covers the concepts related to API, its usage and some illustrative examples. It illustrates various use case. 

For help with 
specific queries, you may also check our query buidler helper at https://app.jobspikr.com/my/query_builder


## Concepts

Details on some of the concepts to better use our API.

### API URL

Our regular end point is

https://api.jobspikr.com/v2 .

In case of persistent issues, you may also use the following URL as fallback

https://api-bcp.jobspikr.com/v2 

### API Keys

To interact with the API, you need API key. Which can be taken from the link https://app.jobspikr.com/my/api_details#authentication. 

There are two set of API keys one for production and sandbox. 

Data obtainted using Sanbox credentials will not be deducted from your credits.
Also our Sanbox API contains only a subset of job data from `1 June 2019 -31 July 2019`.

### Authentication

The Jobspikr API uses API keys to authenticate your requests. You can view and manage your API keys here:

https://app.jobspikr.com/my/api_details#authentication

Authentication to the API can be performed in three ways
* HTTP Basic Auth - provide your client_id and client_auth_key as username and password in the Basic Auth.
* In Headers - provide client_id and client_auth_key as Headers.
* In Body - provide the client_id and client_auth_key as parameters in the body of the request.

All the examples in this documentation send client_id and client_auth_key via Headers

### Job credit

* Job credit refers to each job data that is consumed from our platform. 
* These credits are valid as per your billing cycle.
* Each job consumed using production key _via api_ or _downloaded_ via UI counts towards credit.
* exaJobs accessed from API using sandbox credentials don't count towards anything.

### Sandbox API

If you are just exploring the API, or testing your queries or for any form of tests, please use the Sandbox API credentials obtained from here

https://app.jobspikr.com/my/api_details#authentication

* Jobs available for Sandbox credentials are only a subset of job data from `1 June 2019 -31 July 2019`.
* Jobs accessed from API using sandbox credentials don't count towards anything.


## API Query and Result Data format

All the input and params passed to the API should be in UTF-8 and in json format. Response can be either in JSON(defualt) or XML format.
Response will always have two fields "status" and "message" . Other fields in the response might vary depending upon the query type and will 
be described later in this document.

### Cursor in API Query  for pagination

Our API supports cursor. Which is primarily a mechanism to enable records in smaller chunks when overall number of records is too
high.
How to use the cursor?
Send a request with/without cursor. (TODO in the first request how do you send cursor ?)
Take the next_cursor value from the response.
Use it as the value for cursor argument in the next request body.
Repeat this unless you get ‘status’:‘no_data’ to consume all the data for the query.



## Frequently Asked Questions

### Will I be charged for duplicate job downloads

Even though you might receive same records if you run same query multiple times or across different queries,(correctly), you might get the same 
job records. You'll be charged only for unique records. As of now , counter in the dashboard at TODO shows currently aggregate fetched records either via
API or file download and we run the deduplication process for the counts every 1 hour.

### What is the period in which job credits is counted and duplicates ignored

Job credits and ignoring of duplicate fetches either via API or file download , runs for each monthly billing period 30 day period.
After which these are reset to your original credits from your billing plan.

### I am getting too many results for my queries

This happens if your queries are too generic. We suggest you try to restrict the search term, post dates or location to get specific results. 
Some of these cases are explained in example below. Please go over them and if issue still persists please reach out to us on support channel.

### Where can I get more details about search query json 

Right here :) This field is basically what is supported by ES TODO
Search query json basically supports lucene query syntax. That way elasticsearch Query syntax will work here TODO. In our example section we have shared some illustrative
examples and encourage you to try out whichever is closest to your requirement and play around with it TODO here are the examples for term query, boolean,range query etc. In case you still feel, more help is needed, please reach out to our
support or your dedicated account manager.


### Where can I get more details job schema that you give

TODO give link to definitive schema



##  Troubleshooting

Some of the common issues which developers have faced in past.

### I am getting only old records

### My key is not workign


## API Changelog

2019-12-21 : Added option for freshness check
2019-11-18: Added Job status API


# Group Job Search API.

## Endpoint Details [/data]

### Job Search Using POST Requests [POST]

This end point is the workhorse of the API.  backbone of API can Regular job searches. Please note that even though this is a GET request, even the POST request gives 
the same result. Which we have illustrated later

#### Fields in Request Header

- client_id (string) - This is your unique client identification string to access Jobspikr API

- client_auth_key (string) - This your unique client authentication key to access Jobspikr API

Both `client_id` and `client_auth_key` can be obtained from here. https://app.jobspikr.com/my/api_details#authentication. 

Please use Sandbox API for testing our API responses, so that your job credits are not lost while testing our API.

#### Fields in Request Body

- search_query_json (String,REQUIRED) - Search query generated by you for which the data will be returned. This search query string takes a JSON object as input. To know more about how to construct the search query please read this or explore our query builder.

- size (String,OPTIONAL)-  The number of records to be returned for this request. It can be between 10 and 100. This is an optional parameter with a default value of 100. Size should not be a part of search query json and should be always sent separately as mentioned here.

- format (String,OPTIONAL) - The format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'.

- cursor (String,OPTIONAL) - This for pagination. API response can contain a maximum of 100 records but if there are 2000 records present and to get everything, you can use this cursor argument. This argument should not be mentioned inside of _search_query_json_ and should always be sent separately as mentioned here.
    
    _How to use the cursor?_ - Send a request with/without cursor. Take the next_cursor value from the response. Use it as the value for cursor argument in the next request body.
    Repeat this unless you get ‘status’:‘no_data’ to consume all the data for the query.



#### Fields in Response Body

Depending upon whether 'json' or 'xml' was passed in format field of query,  A JSON or XML object will be returned all the following properties.

- status - The status of the response. It can be either these three
    
    _'success'_, if the request is processed successfully and data is returned.

    _'no_data'_ in case request is processes successfully but there is no more data present for the given query.

    _'error'_ in case of the some problem with processing the request.

- message -  The message explaining the status of the response.
- total_count - Number of records present in total for the query given in request. If this number is more than 100 or the size specified in the request, you can use the `next_cursor` from the response as `cursor` in subsequent request to get all the data.
- job_credit_remaining -  Number of job data that is left to be consumed as per the plan subscription.
- job_data - An array of objects of job data. Format could be json or xml, depending upon what was passed in the format field in query.
- next_cursor - The cursor to be used in the next resquest to get the subsequent data for the query.
- size - Number of records  present in the current response.

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"techincal writer\""
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)
    
    + Body
    
            {
                "status": "success",
                "message": "Data present.",
                "next_cursor": 1576566168294049,
                "total_count": 8,
                "size": 8,
                "job_credit_remaining": 65459,
                "job_data": [
                {
                "job_type": "Full Time",
                "cursor": 1576562594581424,
                "inferred_country": "Sweden",
                "country": "SE",
                "crawl_timestamp": "2019-12-17 05:15:35 +0000",
                "city": "Stockholm",
                "inferred_city": "Stockholm",
                "html_job_description": "Job Description\nVi letar just nu efter en skicklig kommunikatör till Worldlines….",
                "url": "https://www.careerbuilder.se/jdp/technical-writer-till-worldline-j3m0gr790pp56wvksmh",
                "geo": "se",
                "uniq_id": "3414773dd9c696848062a23e499df7fc",
                "job_description": "Vi letar just nu efter en skicklig kommunikatör till Worldlines dynamiska team! I den här….",
                "job_board": "careerbuilder",
                "state": "Stockholms län",
                "inferred_state": "Stockholm",
                "post_date": "2019-12-16",
                "company_name": "Academic Work",
                "category": "Sales Engineers",
                "job_title": "Technical Writer till Worldline"
                },
                ]
            }
        
    + Attributes

        + status - Status of the response. It can have one of the 3 values : 'success', 'no_data' or 'error'
        + message - Message explaining the status of the response
        + next_cursor -  The cursor to be used in the next resquest to get the subsequent data for the query.
        + `total_count` -  Number of records present for the query in request. If this number is more than 100 or the size specified in the request, you can use the `next_cursor` in subsequent request to get all the data.
        + size - Number of records  present in the current response
        + job_credit_remaining -   Number of job data that is left to be consumed as per the plan subscription.
        + job_data -  An array of objects of job data. Format could be json or xml, depending upon what was passed in the format field in query


### Job Search Using GET Request [GET]

Above query and in general all the queries illulstrated here work for POST as well as GET. In other places we have
used GET for uniformity, but if you prefer POST then that should work equally well. Please click on the link above to
open console to try out POST request for search. All the description and details remains same as the GET request above TODO give link



+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"techincal writer\""
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor: cursor_value (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - The format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)
    
    + Body
    
            {
                "status": "success",
                "message": "Data present.",
                "next_cursor": 1576566168294049,
                "total_count": 8,
                "size": 8,
                "job_credit_remaining": 65459,
                "job_data": [
                {
                "job_type": "Full Time",
                "cursor": 1576562594581424,
                "inferred_country": "Sweden",
                "country": "SE",
                "crawl_timestamp": "2019-12-17 05:15:35 +0000",
                "city": "Stockholm",
                "inferred_city": "Stockholm",
                "html_job_description": "Job Description\nVi letar just nu efter en skicklig kommunikatör till Worldlines….",
                "url": "https://www.careerbuilder.se/jdp/technical-writer-till-worldline-j3m0gr790pp56wvksmh",
                "geo": "se",
                "uniq_id": "3414773dd9c696848062a23e499df7fc",
                "job_description": "Vi letar just nu efter en skicklig kommunikatör till Worldlines dynamiska team! I den här….",
                "job_board": "careerbuilder",
                "state": "Stockholms län",
                "inferred_state": "Stockholm",
                "post_date": "2019-12-16",
                "company_name": "Academic Work",
                "category": "Sales Engineers",
                "job_title": "Technical Writer till Worldline"
                },
                ]
            }
        
    + Attributes

        + status - Status of the response. It can have one of the 3 values : 'success', 'no_data' or 'error'
        + message - Message explaining the status of the response
        + `total_count` - Number of records present for the query in request. If this number is more than 100 or the size specified in the request, you can use the `next_cursor` in subsequent request to get all the data.
        + next_cursor - The cursor to be used in the next resquest to get the subsequent data for the query.
        + size - Number of records  present in the current response
        + job_credit_remaining -   Number of job data that is left to be consumed as per the plan subscription.
        + job_data -  An array of objects of job data. Format could be json or xml, depending upon what was passed in the format field in query


# Group Job Status API


## Endpoint Details [/active_jobs_checker]

### Check if given uniq_ids are still active [POST]

Here you can pass a list of uniq ids and check if those are still listed on the site.

#### Fields in Request Header

- client_id (string) - This is your client id which can be obtained from here TODO The question
- client_auth_key (string) - Client auth key can be obtained from here TODO. Please use sandbox key for testing and production key for the actual key so that your job credits are not lost in testing

#### Fields in Request Body

- uniq_ids : (Array[String],Conditionally REQUIRED) : Uniq ids of the job data that is consumed from JobspikrAPI in an array. Either uniq_ids or job_urls must be present in the request body.
- job_urls : (Array[String],Conditionally REQUIRED) : Job urls of the job data that is consumed from JobspikrAPI in an array. Either uniq_ids or job_urls must be present in the request body.

- format (OPTIONAL) : The format of the response from the API. Its an optional field with the default value as json.


#### Fields in Response Body

Depending upon whether 'json' or 'xml' was passed in format field of query,  A JSON or XML object will be returned all the following properties.

- status : The status of the response. It can have one of 2 values : 'success' or 'error' .

- message : The message explaining the status of the response

- active_check_remaining_credits : Number of remaining job active/inactive status check credits for your organization

- job_data : Array of all the job data based on the uniq ids passed in the request with information related to the active/inactive status of the job.

- missing_uniq_ids :  An Array of all uniq_ids passed which doesn't have a matching job present.

- missing_job_urls : An Array of all job_urls passed which doesn't have a matching job present.

+ Request (application/json)

    + Body
        
            {
            "uniq_ids": [
            "ac754bb31ec4be4cab4ac56051a71115",
            "749755fab2400b6d1b9dfd4de8b47b82",
            "9031f9822ce05123e1c1f85a17681731",
            "1031f982281e0512121c1f85a17js173"
            ]
            }
    + Headers 

            client_id: Replace with your client_id
            client_auth_key:  Replace with your client_auth_key
    
    + Attributes
            
        + `uniq_ids` : `uniq_ids` (string,optional) - Uniq ids of the job data that is consumed from JobspikrAPI in an array. Either `uniq_ids or job_urls` must be present in the request body.
        + `job_urls` : `job_urls` (string,optional) - Job urls of the job data that is consumed from JobspikrAPI in an array. Either `uniq_ids` or `job_urls` must be present in the request body.
        + format: json (string) -  Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
            

+ Response 200 (application/json)

    + Body
        
            {
                "status": "success",
                "message": "Data present.",
                "freshness_check_remaining_credits": 9135,
                "job_data": [
                { 
                    "uniq_id":"ac754bb31ec4be4cab4ac56051a71115",
                    "url": "https://www.reed.co.uk/jobs/fleet-administrator-maternity-cover/39571333?source=searchResults#/jobs/admin-secretarial-pa-jobs?sortby=DisplayDate",
                    "has_expired": "false",
                    "latest_expiry_check_date": "2019-12-17",
                    "post_date": "2019-12-16"
                },
                {
                    "uniq_id": "749755fab2400b6d1b9dfd4de8b47b82",
                    "url": "https://www.reed.co.uk/jobs/customer-service-administrator/39573809?source=searchResults#/jobs/admin-secretarial-pa-jobs?sortby=DisplayDate",
                    "has_expired": "false",
                    "latest_expiry_check_date": "2019-12-17",
                    "post_date": "2019-12-16"
                }
                       ],
                "missing_uniq_ids": [
                    "9031f9822ce05123e1c1f85a17681731",
                    "1031f982281e0512121c1f85a17js173"
                    ]
            } 
        
    + Attributes

        + status - The status of the response. It can have one of 2 values - 'success' or 'error' .
        + message - The message explaining the status of the response
        + active_check_remaining_credits - Number of remaining job active/inactive status check credits for your organization
        + job_data - Array of all the job data based on the uniq ids passed in the request with information related to the active/inactive status of the job.
        + missing_uniq_ids - An Array of all uniq_ids passed which doesn't have a matching job present.
        + missing_job_urls - An Array of all job_urls passed which doesn't have a matching job present.
      
### Check if given uniq_ids are still active [POST]

Previous query for checkign current status of job you can use POST method too. It takes a list of uniq_ids or urls and returns the result

All the description and details remains same as the GET query above TODO give link


+ Request (application/json)

    + Body
        
            {
            "uniq_ids": [
            "ac754bb31ec4be4cab4ac56051a71115",
            "749755fab2400b6d1b9dfd4de8b47b82",
            "9031f9822ce05123e1c1f85a17681731",
            "1031f982281e0512121c1f85a17js173"
            ]
            }
    + Headers 

            client_id: Replace with your client_id
            client_auth_key:  Replace with your client_auth_key
    
    + Attributes
            
            + `uniq_ids` : `uniq_ids` (array[string],optional) Uniq ids of the job data that is consumed from JobspikrAPI in an array. Either `uniq_ids` or `job_urls` must be present in the request body.
            + `job_urls` : `job_urls` (array[string],optional) - Job urls of the job data that is consumed from JobspikrAPI in an array. Either `uniq_ids` or `job_urls` must be present in the request body.
            + format : json (string) -  Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
            

+ Response 200 (application/json)

    + Body
        
            {
                "status": "success",
                "message": "Data present.",
                "freshness_check_remaining_credits": 9135,
                "job_data": [
                { 
                    "uniq_id":"ac754bb31ec4be4cab4ac56051a71115",
                    "url": "https://www.reed.co.uk/jobs/fleet-administrator-maternity-cover/39571333?source=searchResults#/jobs/admin-secretarial-pa-jobs?sortby=DisplayDate",
                    "has_expired": "false",
                    "latest_expiry_check_date": "2019-12-17",
                    "post_date": "2019-12-16"
                },
                {
                    "uniq_id": "749755fab2400b6d1b9dfd4de8b47b82",
                    "url": "https://www.reed.co.uk/jobs/customer-service-administrator/39573809?source=searchResults#/jobs/admin-secretarial-pa-jobs?sortby=DisplayDate",
                    "has_expired": "false",
                    "latest_expiry_check_date": "2019-12-17",
                    "post_date": "2019-12-16"
                }
                       ],
                "missing_uniq_ids": [
                    "9031f9822ce05123e1c1f85a17681731",
                    "1031f982281e0512121c1f85a17js173"
                    ]
            } 
        
    + Attributes

        + status - The status of the response. It can have one of 2 values - 'success' or 'error' .
        + message - The message explaining the status of the response
        + active_check_remaining_credits - Number of remaining job active/inactive status check credits for your organization
        + job_data - Array of all the job data based on the uniq ids passed in the request with information related to the active/inactive status of the job.
        + missing_uniq_ids - An Array of all uniq_ids passed which doesn't have a matching job present.
        + missing_job_urls - An Array of all job_urls passed which doesn't have a matching job present.


# Group Aggregation API 

* Still under development

Description of the aggregation API

## Endpoint details [/aggregate_data]

### Retrieve Aggregate Data [GET]

In the example below we'll illustrate the API params as well as an example to aggregate job query ''technical write' to aggregate by company name and country. Like other end points in jobspikr, here too GET and POST both request types will work. Later In the POST example ,we'll illustrate' aggregation by company name and post date

#### Fields in Request Header

- client_id (string) - This is your client id which can be obtained from here TODO The question
- client_auth_key (string) - Client auth key can be obtained from here TODO. Please use sandbox key for testing and production key for the actual key so that your job credits are not lost in testing

#### Fields in Request Body

- search_query_json (String,REQUIRED) - Search query generated by you for which the data will be returned. This search query string takes a JSON object as input. To know more about how to construct the search query please read this or explore our query builder. In case of aggregate API, instead of returning the job data for this request, the given aggregation will be applied on top of this query.
- aggregate_by (String,REQUIRED) - The json which instructs the API to aggregate based on the fields provided. Two levels of aggregation are possible


Some notes w.r.t aggregate_by parameter

- ‘field_1’ mentions the field on top of which the top level aggregation should be done on.
- ‘size_1’ mentions the number of aggregated results that should be returned form the API for top level aggregation.
- field_2 mentions the field on top of which the sub aggregation should be done on.
- ‘size_2’ mentions the number of aggregated results that should be from api for sub aggregation.
Please note that field_1 or field_2 must be from the following list - ‘company_name’, ‘inferred_country’, ‘post_date’ and If the field parameter is ‘post_date’ then ‘size’ parameter is not required, instead ‘interval’ parameter should be used(value for 'interval' can only be month or quarter
W.r.t size.  size parameters(size_1, size_2) when used can’t go above 10000.  If only one level of aggregation is used size_1 should be  <= 10000 If two level of aggregations are used size_1 + (size_1 * size_2) should be <= 10000


+ Request (application/json)

    + Body
        
            {
                "search_query_json": {
                "query_string": {
                "default_field": "job_title",
                "query": "\"technical writer\""
                }
                },

                "aggregate_by": {
                "field_1": "company_name",
                "size_1": 100,
                "field_2": "inferrect_country",
                "size_2": 10
                }
            }
            
            

    + Headers 

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key
                

    + Attributes
    
        + `search_query_json`: `search_query_json`(string,REQUIRED) - Same as used throught in jobspikr API, here  instead of returning the job data for this request, the given aggregation will be applied on top of this query.
        + `aggregate_by`: `aggregate_by` (string,REQUIRED) -  The json which instructs the API to aggregate based on the fields provided. Two levels of aggregation are possible

+ Response 200 (application/json)

    + Body
        
            {
                "status": "success",
                "message": "Data present.",
                "freshness_check_remaining_credits": 9135,
               
            } 
        
    + Attributes

        + status - The status of the response. It can have one of 2 values - 'success' or 'error' .
        + message - The message explaining the status of the response
        + active_check_remaining_credits - Number of remaining job active/inactive status check credits for your organization
        + job_data - Array of all the job data based on the uniq ids passed in the request with information related to the active/inactive status of the job.
        + missing_uniq_ids - An Array of all uniq_ids passed which doesn't have a matching job present.
        + missing_job_urls - An Array of all job_urls passed which doesn't have a matching job present.

### Retrieve  Aggregate Data [POST]

In the example below we'll illustrate the API params as well as an example to aggregate job query ''technical write' to aggregate by company name and country. Like other end points in jobspikr, here too GET and POST both request types will work. Later In the POST example ,we'll illustrate' aggregation by company name and post date

#### Fields in Request Header

- client_id (string) - This is your client id which can be obtained from here TODO The question
- client_auth_key (string) - Client auth key can be obtained from here TODO. Please use sandbox key for testing and production key for the actual key so that your job credits are not lost in testing

#### Fields in Request Body

- search_query_json (String,REQUIRED) - Search query generated by you for which the data will be returned. This search query string takes a JSON object as input. To know more about how to construct the search query please read this or explore our query builder. In case of aggregate API, instead of returning the job data for this request, the given aggregation will be applied on top of this query.
- aggregate_by (String,REQUIRED) - The json which instructs the API to aggregate based on the fields provided. Two levels of aggregation are possible

Some notes w.r.t aggregate_by parameter

- ‘field_1’ mentions the field on top of which the top level aggregation should be done on.
- ‘size_1’ mentions the number of aggregated results that should be returned form the API for top level aggregation.
- field_2 mentions the field on top of which the sub aggregation should be done on.
- ‘size_2’ mentions the number of aggregated results that should be from api for sub aggregation.
Please note that field_1 or field_2 must be from the following list - ‘company_name’, ‘inferred_country’, ‘post_date’ and If the field parameter is ‘post_date’ then ‘size’ parameter is not required, instead ‘interval’ parameter should be used(value for 'interval' can only be month or quarter
W.r.t size.  size parameters(size_1, size_2) when used can’t go above 10000.  If only one level of aggregation is used size_1 should be  <= 10000 If two level of aggregations are used size_1 + (size_1 * size_2) should be <= 10000


+ Request (application/json)

    + Body
        
            {
                "search_query_json": {
                "query_string": {
                "default_field": "job_title",
                "query": "\"technical writer\""
                }
                },

                "aggregate_by": {
                "field_1": "company_name",
                "size_1": 100,
                "field_2": "post_date",
                "interval": "month"
                }
            }
            
            


    + Headers 

            client_id: Replace with your client_id
            client_auth_key:  Replace with your client_auth_key

    + Attributes
    
        + `search_query_json` : `search_query_json` (string,REQUIRED) - Same as used throught in jobspikr API, here  instead of returning the job data for this request, the given aggregation will be applied on top of this query.
        + `aggregate_by` : `aggregate_by` (string,REQUIRED) -  The json which instructs the API to aggregate based on the fields provided. Two levels of aggregation are possible

+ Response 200 (application/json)

    + Body
        
            {
                "status": "success",
                "message": "Data present.",
                "freshness_check_remaining_credits": 9135,
               
            } 
        
    + Attributes

        + status - The status of the response. It can have one of 2 values - 'success' or 'error' .
        + message - The message explaining the status of the response
        + active_check_remaining_credits - Number of remaining job active/inactive status check credits for your organization
        + job_data - Array of all the job data based on the uniq ids passed in the request with information related to the active/inactive status of the job.
        + missing_uniq_ids - An Array of all uniq_ids passed which doesn't have a matching job present.
        + missing_job_urls - An Array of all job_urls passed which doesn't have a matching job present.


# Group Examples

## Job Search API [/data]

In this section we'll cover some common use cases. You may use these as starting template and try out various changes. Another helpful tool for playing around with query is
our API Query Builder at https://app.jobspikr.com/my/query_builder

### Get all jobs with marketing in title [POST]

To get all jobs with marketing in title we can use `query_string` query. This query takes `default_field or fields` mentioning the field(s) where the query should be run and `query`
which mentions the value that needs to be matched. In this case the query will look like this
```
    "query_string": {
        "default_field": "job_title",
        "query": "marketing"
    }
```

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "marketing"
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO
    
+ Response 200 (application/json)
    

### Get all jobs with marketing in title in XML format [POST]

Our API responses can be of _json_ of _xml_. By default all our API responses are in _json_ format. If we need get the results
in _xml_ format we can user `format` parameter with the value as `xml`.

TODO Desc

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "format": "xml",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "marketing"
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

+ Response 200 (application/json)

    
### Get all jobs with sales in description [POST]

To get all the jobs with _sales_ in the description, we can use `query_string` query with `job_description` as the value for the `default_field`.
```
    "query_string": {
        "default_field": "job_description",
        "query": "sales"
    }
```

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_description",
                    "query": "sales"
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

+ Response 200 (application/json)

### Find all jobs with "python developer" in job title [POST]

When we want to find all jobs with "python developer" or any phrase in the same order of words we should enclose the phrase in double quotes 
while providing it as a value to the query in the query_string object. This is quering for exact match.

```
  "query_string": {
    "fields": "job_title",
    "query": "\"python developer\""
  }

```
*Note:* In this case, if the double quotes are not used around the phrase(python developer), the we would all the jobs which has either python or developer or 
both in any order as response from the API.

+ Request (application/json)
  
    + Body
            
         {
                "size": 50,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"python developer\""
                                    }
                                }
            }
        
        
    + Headers
    
    
                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)
    
### Find all jobs with "java developer" in either job title or job description [POST]

When we want to find the presence of a word of phrase in more than once field, we should pass those field names as array to `fields` in the `query_string` query object.
Here we should pass `["job_title", "job_description"]` as value to `fields` 

```
  "query_string": {
    "fields": ["job_title", "job_description"],
    "query": "\"java developer\""
  }

```

+ Request (application/json)
  
    + Body
            
         {
                "size": 50,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "fields": ["job_title", "job_description"],
                    "query": "\"java developer\""
                                    }
                                }
            }
        
        
    + Headers
    
    
                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)
    

### Find all jobs with sales or marketing in title [POST]

To get all the jobs with either sales or marketing present in the title we can join those words with keyword `OR` while passing as value to the query.
```
"query_string": {
    "fields": "job_title""
    "query": "sales OR marketing"
  }
```

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "sales OR marketing"
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)


### Find all jobs with "python developer" or "java developer" in title [POST]

To get all the jobs with either "python developer" or "java developer" present in the title we can use the same `OR` keyword between the phrases and pass it as value to the query.
```
"query_string": {
    "fields": "job_title",
    "query": "\"python developer\"" OR "\"java developer\""
  }
```

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"sales manager\" OR \"marketing manager\""
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO


+ Response 200 (application/json)


### Find all jobs from London, United Kingdom [POST]

To get all the jobs from 'London, United Kingdom', we have to use `bool` query with `must` condition. The query will look like this
```
  "bool": {
    "must": [
      {
        "query_string": {
          "fields": [
            "country",
            "inferred_country"
          ],
          "query": "\"United Kingdom\" OR \"England\" OR \"UK\""
        }
      },
      {
        "query_string": {
          "fields": [
            "city",
            "inferred_city"
          ],
          "query": "\"London\""
        }
      }
    ]
  }
```
* Here there are two queries inside must, each checking for country match and city match respectively. We use `must`, beacause, the results returned
will statify both the queries specified inside must.
* Instead of just city London, we check for city London and country United Kingdom because, city names are not unique. There are city with name 'London' in
United States and Canada as well. Hence to be more specific we use both city and country.
* We search for 'London' in both city and inferred city and 'United Kingdom' in both country and inferred country to give us a better coverage.
* Try to use all city, state and country along with respective inferred fields in all your custom queries for better results.


+ Request (application/json)
  
    + Body
            
        {
            "size": 50,
            "format": "json",
            "search_query_json": {
                "bool": {
                    "must": [
                        {
                            "query_string": {
                                "fields": [
                                    "country",
                                    "inferred_country"
                                ],
                                "query": "\"United Kingdom\" OR \"England\" OR \"UK\""
                            }
                        },
                        {
                            "query_string": {
                                "fields": [
                                    "city",
                                    "inferred_city"
                                ],
                                "query": "\"London\""
                            }
                        }
                    ]
                }
            }
        }
        
        
    + Headers
    
    
                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)


### Find all jobs from Texas, United States [POST]

To get all the jobs from 'Texas, United States', we have to use the same `bool` query with `must` condition. The query will look like this
```
    "bool": {
      "must": [
        {
          "query_string": {
            "fields": [
              "country",
              "inferred_country"
            ],
            "query": "\"United Kingdom\" OR \"England\" OR \"UK\""
          }
        },
        {
          "query_string": {
            "fields": [
              "city",
              "inferred_city"
            ],
            "query": "\"London\""
          }
        }
      ]
    }

```


+ Request (application/json)
  
    + Body
            
        {
            "size": 50,
            "format": "json",
            "search_query_json": {
                "bool": {
                    "must": [
                        {
                            "query_string": {
                                "fields": [
                                    "country",
                                    "inferred_country"
                                ],
                                "query": "\"United States\" OR \"USA\" OR \"United States\" OR \"US\""
                            }
                        },
                        {
                            "query_string": {
                                "fields": [
                                    "state",
                                    "inferred_state"
                                ],
                                "query": "\"Texas\" OR \"tx\""
                            }
                        }
                    ]
                }
            }
        }
        
        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)


### Find all jobs from  Sydney, Australia OR Seattle, USA [POST]

To get the jobs from different location we should use `bool` query with `should` condition. Inside should we should use multiple `bool` queries with `must`
as given in the previous example. For the given example, to find all jobs from Sydney, Australia OR Seattle, USA, the `bool` query will look like the following.
```
  {
    "bool": {
      "should": [
        {
          "bool": {
            "must": [
              {
                "query_string": {
                  "fields": [
                    "country",
                    "inferred_country"
                  ],
                  "query": "\"Australia\""
                }
              },
              {
                "query_string": {
                  "fields": [
                    "state",
                    "inferred_state"
                  ],
                  "query": "\"New South Wales\""
                }
              },
              {
                "query_string": {
                  "fields": [
                    "city",
                    "inferred_city"
                  ],
                  "query": "\"Sydney\""
                }
              }
            ]
          }
        },
        {
          "bool": {
            "must": [
              {
                "query_string": {
                  "fields": [
                    "country",
                    "inferred_country"
                  ],
                  "query": "\"United States\" OR \"USA\" OR \"United States\" OR \"US\""
                }
              },
              {
                "query_string": {
                  "fields": [
                    "state",
                    "inferred_state"
                  ],
                  "query": "\"Washington\" OR \"wa\""
                }
              },
              {
                "query_string": {
                  "fields": [
                    "city",
                    "inferred_city"
                  ],
                  "query": "\"Seattle\""
                }
              }
            ]
          }
        }
      ]
    }
  }
```
Here the `should` condition acts as `OR` and must condition acts as `AND`. Hence the query that is given above states
```
    ((city: Sydney) AND (state: New South Wales) AND (country: Australia)) OR ((city: Seattle) AND (state: Washington) AND (country: United States))
```

+ Request (application/json)
  
    + Body
            
    {
      "search_query_json": {
        "bool": {
          "should": [
            {
              "bool": {
                "must": [
                  {
                    "query_string": {
                      "fields": [
                        "country",
                        "inferred_country"
                      ],
                      "query": "\"Australia\""
                    }
                  },
                  {
                    "query_string": {
                      "fields": [
                        "state",
                        "inferred_state"
                      ],
                      "query": "\"New South Wales\""
                    }
                  },
                  {
                    "query_string": {
                      "fields": [
                        "city",
                        "inferred_city"
                      ],
                      "query": "\"Sydney\""
                    }
                  }
                ]
              }
            },
            {
              "bool": {
                "must": [
                  {
                    "query_string": {
                      "fields": [
                        "country",
                        "inferred_country"
                      ],
                      "query": "\"United States\" OR \"USA\" OR \"United States\" OR \"US\""
                    }
                  },
                  {
                    "query_string": {
                      "fields": [
                        "state",
                        "inferred_state"
                      ],
                      "query": "\"Washington\" OR \"wa\""
                    }
                  },
                  {
                    "query_string": {
                      "fields": [
                        "city",
                        "inferred_city"
                      ],
                      "query": "\"Seattle\""
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    }
        
+ Headers


                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)


### Find all jobs where salary exists [POST]

Not all the job records have `salary_offered` field since they are not provided in the source page itself. To get only jobs that has `salary_offered`
field we can use the `exists` query specifiying the field name as as a value for the `field` key in the query.
```
    "exists": {
      "field": "salary_offered"
    }
```

+ Request (application/json)
  
    + Body
            
    {
        "size": 50,
        "format": "json",
        "search_query_json": {
            "exists": {
                "field": "salary_offered"
            }
        }
    }

        
    + Headers
                
                
                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO


+ Response 200 (application/json)

### Find all jobs where any one of the contact details exists [POST]

Like `salary_offered` field, not all the job records have `contact_email` and `contact_phone_number` fields since they are not provided in the source page itself. 
To get only jobs that has either `contact_email` or `contact_phone_number` or both, we can use the `exists` query inside a `bool` query with `should` condition.
```
    "exists": {
      "field": "salary_offered"
    }
```

+ Request (application/json)
  
    + Body
            
    {
      "size": 50,
      "format": "json",
      "search_query_json": {
        "bool": {
          "should": [
            {
              "exists": {
                "field": "contact_phone_number"
              }
            },
            {
              "exists": {
                "field": "contact_email"
              }
            }
          ]
        }
      }
    }


        
    + Headers
                
                
                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO


+ Response 200 (application/json)


### Find all the jobs which don't have Undefined in the job type [POST]

Few of the job records have 'Undefined' as the value for `job_type` field. This is because not all the jobs have job type mentioned in the source URL.
If we want to get only the job records which has a valid `job_type` mentioned, we can query saying return all jobs that doesn't have 'Undefined' as job type.

To ingore records based on the value we can use `bool` query with `must_not` condition. The query for our usecase will look like below
```
        "bool": {
          "must_not": [
            {
              "query_string": {
                "fields": [
                  "job_type"
                ],
                "query": "undefined"
              }
            }
          ]
        }
```

+ Request (application/json)
  
    + Body
            
    {
      "size": 50,
      "format": "json",
      "search_query_json": {
        "bool": {
          "must_not": [
            {
              "query_string": {
                "fields": [
                  "job_type"
                ],
                "query": "undefined"
              }
            }
          ]
        }
      }
    }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)


### Find all the jobs posted between 1st July 2019 and 7th July 2019 [POST]

To find all the jobs posted between a date range, we can use the range query. Since we have to find job between a date range based on `post_date`, we should
mention it as the field in the range query.
```
    {
      "range": {
        "post_date": {
          "gte": "2019-07-01",
          "lte": "2019-07-07"
        }
      }
    }
```

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "format": "json",
                "search_query_json": {
                    "range": {
                        "post_date": {
                        "gte": "2019-07-01",
                        "lte": "2019-07-07"
                                    }
                                }
                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)


### Find all jobs posted between 1st July 2019 and 7th July 2019 and has salary offered field present [POST]

To get all the jobs which are posted between a specific date range and has salary offered field present, we can use `bool` query with `must` condition.

+ Request (application/json)
  
    + Body

        {
            "size": 50,
            "format": "json",
            "search_query_json": {
                "bool": {
                    "must": [
                        {
                            "range": {
                                "post_date": {
                                    "gte": "2019-07-01",
                                    "lte": "2019-07-07"
                                }
                            }
                        },
                        {
                            "exists": {
                                "field": "salary_offered"
                            }
                        }
                    ]
                }
            }
        }

    
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)

### Get me list of all jobs posted in last 2 days TODO TO add in the api, todo need to add it in api  [GET]


Desc TODO

    

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"techincal writer\""
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)


### Find all valid jobs(the ones which have not expired) [POST]

To get only valid jobs i.e, job which are not expired, we can use `query_string` query to get all the jobs where the `has_expired` field is false
```
 "query_string": {
    "default_field": "has_expired",
    "query": false
 }
```

+ Request (application/json)
  
    + Body
            
      {
        "size": 50,
        "format": "json",
        "search_query_json": {
          "query_string": {
            "default_field": "has_expired",
            "query": false
          }
        }
      }


        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)
    

### How to get only unique jobs after ignoring duplicates [POST]

* Applicable only for Business Plan & Above

To get all the unique jobs deduplicated across the sources(job boards and websites) we can use `exclude_duplicates` paramter in the query.
This paramter should used in the same level as `search_query_json` and `cursor`.
It can used only by organizations that are in _Business Plan or Above_.


+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "exclude_duplicates": true
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"techincal writer\""
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)
    

### Find all 'product manager' jobs from USA  [POST]

To find all the 'product manager' jobs from United States, we can use `bool` query and join the 'product manager' query and 'United States' query with a `must` condition.


+ Request (application/json)
  
    + Body
            
    {
      "size": 50,
      "format": "json",
      "search_query_json": {
        "bool": {
          "must": [
            {
              "query_string": {
                "default_field": "job_title",
                "query": "\"product manager\""
              }
            },
            {
              "query_string": {
                "fields": [
                  "country",
                  "inferred_country"
                            ],
                            "query": "\"United States\" OR \"USA\" OR \"United States\" OR \"US\""
              }
            }
          ]
        }
      }
    }
      
        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)


### Find "Data Scientist" jobs from Australia or Newzealand [POST]

To find all the 'data scientist' jobs from Australia or Newzeland, we can use `bool` query and join the 'data scientist' query and 'Australia OR Newzeland' query with a `must` condition.

+ Request (application/json)
  
    + Body
            
    {
      "size": 50,
      "format": "json",
      "search_query_json": {
        "bool": {
          "must": [
            {
              "query_string": {
                "default_field": "job_title",
                "query": "\"data scientist\""
              }
            },
            {
              "query_string": {
                "fields": [
                  "country",
                  "inferred_country"
                            ],
                            "query": "\"Australia\" OR \"New Zeland\""
              }
            }
          ]
        }
      }
    }


        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)


### Find "Marketing Manager" jobs across United Kingdom, excluding London. [POST]

To get all the "marketing manager" jobs from UK excluding London, we should use `bool` query with combination of `must` and `must_not`, mentioning the title 
and the country in the `must` and mentioning the city in `must_not`

+ Request (application/json)
  
    + Body
            
    {
        "size": 50,
        "format": "json",
        "search_query_json": {
          "bool": {
            "must": [
              {
                "query_string": {
                  "default_field": "job_title",
                  "query": "\"marketing manager\""
                }
              },
              {
                "query_string": {
                  "fields": [
                    "country",
                    "inferred_country"
                  ],
                  "query": "\"United Kingdom\" OR \"England\" OR \"Scotland\" OR \"Northern Ireland\" OR \"Wales\" OR \"UK\" OR \"United Kingdom\""
                }
              }
            ],
            "must_not": [
              {
                "query_string": {
                  "fields": [
                    "city",
                    "inferred_city"
                  ],
                  "query": "\"London\""
                }
              }
            ]
          }
        }
      }


        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)


### Jobs with title manager, but excluding sales in both title and description [GET]

To get all the jobs with 'manager' in the title, but should have the keyword 'sales' in title or description, we can use `bool` query with a
combination of `must` and `must_not` as given in the previous example.

+ Request (application/json)
  
    + Body
            
    {
      "size": 50,
      "format": "json",
      "search_query_json": {
        "bool": {
          "must": [
            {
              "query_string": {
                "default_field": "job_title",
                "query": "\"manager\""
              }
            }
          ],
          "must_not": [
            {
              "query_string": {
                "fields": [
                  "job_title",
                  "job_description"
                            ],
                            "query": "sales"
              }
            }
          ]
        }
      }
    }


    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the respone from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports lucene query syntax. You may find more details about it at TODO

    
+ Response 200 (application/json)