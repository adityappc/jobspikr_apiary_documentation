FORMAT: 1A
HOST: https://api.jobspikr.com/v2

# JobsPikr API


JobsPikr API helps you interact and use the data provided by JobsPikr. 

There are three APIs here:

* Job Search API - search for jobs based on various criteria.

* Job Status API - check if a particular job consumed earlier is still active and posted on the source website.

* Expired Jobs API - get all (consumed) jobs expired on a given date range.


This document covers the concepts related to API, its usage and some illustrative examples and use cases. 

For help with specific queries, you may also check our query builder helper at https://app.jobspikr.com/my/query_builder


## Concepts

Details on some of the concepts to better use our API.

### API URL

Our regular endpoint is

https://api.jobspikr.com/v2 .

In case of persistent issues, you may also use the following URL as fallback

https://api-bcp.jobspikr.com/v2 

### API Keys

To interact with the API, you need an API key., which can be taken from the link https://app.jobspikr.com/my/api_keys. 

There are two sets of API keys - one for production, that hosts the actual data, and the other for sandbox, mainly used for testing purposes. 

Data obtained using Sandbox credentials will not be deducted from your credits.
Also, our Sandbox API contains only a subset of job data from `1 June 2019 -31 July 2019`.

### Authentication

The JobsPikr API uses API keys to authenticate your requests. You can view and manage your API keys here:

https://app.jobspikr.com/my/api_keys

Authentication to the API can be performed in three ways:
* HTTP Basic Auth - provide your client_id and client_auth_key as username and password in the Basic Auth.
* In Headers - provide client_id and client_auth_key as Headers.
* In Body - provide the client_id and client_auth_key as parameters in the body of the request.

All the examples in this documentation send client_id and client_auth_key via Headers.

### Job credit

* Job credit refers to each job data that is consumed from our platform. 
* These credits are valid as per your billing cycle.
* Each job consumed using production key via API or downloaded by logging in to www.app.jobspikr.com  counts towards credit.
* Jobs accessed from API using sandbox credentials don't count towards anything.

### Sandbox API

If you are just exploring the API or testing your queries or for any form of tests, please use the Sandbox API credentials obtained from here

https://app.jobspikr.com/my/api_keys

* Jobs available for Sandbox credentials are only a subset of job data from `1 June 2019 -31 July 2019`.
* Jobs accessed from API using sandbox credentials don't count towards anything.


## Request and Response Data format

* All the input and params passed to the API should be in `UTF-8` and in JSON format.
* Response can be either in JSON(default) or XML format.
* Response will always have two fields `status` and `message`.
* Other fields in the response might vary depending upon the endpoint accessed and will be described later in this document.


## Cursor in API Query for pagination

Our API supports cursor, which is primarily a mechanism to consume data in smaller chunks when the overall number of records is too high.

### How to use the cursor?
1. Send a request with/without the cursor.
2. Take the next_cursor value from the response.
3. Use it as the value for cursor argument in the next request body.
4. Repeat step 2 & 3 until you get `"status":"no_data"` in the response.
5. When you get `no_data` it means there is no more data present for the given query at that time. Store the cursor in a file or DB.
6. Try sending an API request with the stored cursor value after an hour(minimum). If there is any new data added, which satisfies the given query in the last 1 hour, it will be returned.
7. Repeat steps 2-7 to keep getting data.

## Frequently Asked Questions

### Will I be charged for consuming/downloading the same jobs again?

Even though you consumed the same records multiple times - either by making the same query again or across different queries satisfying the same condition -
your volume credits will be deducted for the unique records consumed in a given credit cycle(30 days period). The counter in the dashboard here https://app.jobspikr.com/ 
shows the number of unique records consumed either via API or file download. We update this counter every one hour where we get the number of unique records consumed
so far by your account for the current billing cycle.

### What is the period in which job credits are counted and repeated job consumption ignored?

Your job credits are valid for 30 days (Each billing cycle). These credits can be consumed via the JobsPikr API or file download. When your billing cycle is reset, the job credits are reset as per your plan



### I am getting too many results for my queries

This happens if your queries are too generic. We suggest you try to restrict the search term, post dates or location to get specific results. 
Some of these cases are explained in the example below. Please go over them and if the issue still persists please reach out to us by creating a support ticket.

### Will my  credits be carried forward to the next month?
Your job credits are applicable to your current billing cycle (30 days) only and are not carried forward to the next month.

### Where can I get more details about search_query_json?

We use Elasticsearch to store and retrieve all the job records, hence `search_query_json` can take in whatever `query` accepts as per Elasticsearch.
But we internally use only these two queries to construct all our queries - [query_string](https://www.elastic.co/guide/en/elasticsearch/reference/7.6/query-dsl-query-string-query.html)
and [bool](https://www.elastic.co/guide/en/elasticsearch/reference/7.6/query-dsl-bool-query.html).

If you don't know Elasticsearch queries, it’s not a problem at all. We don't want you to go through those documents as well.
We've given an extensive list of examples explaining how each and every query is built for multiple scenarios (#reference/examples/job-search-api).  They should help you understand how this works.


Also, we have a [query builder](https://app.jobspikr.com/my/query_builder) which will help you build the most common queries.

In case you still need more help, please reach out to our support and we would be happy to help.

## Job Data Schema
`crawl_timestamp`: this refers to the time the data is crawled by our crawlers.

`url`: the URL from which this particular job data is crawled.

`job_title`: the job title as given in the page.

`company_name`: the company name as given on the page.

`city`: the city of the job posting as given in the page. Might not be always present.

`state`: the state of the job posting as given in the page. Might not be always present.

`country`: the country of the job posting as given in the page. Should be present for all the jobs. If missing, it's a serious problem.

`inferred_country`: This is a system-generated field. The country field will have different values for the same country depending on the site like IN, IND, India all referring to India. This field will contain the normalized country name.

`inferred_city`: This is a system-generated field. normalized city names, similar to the inferred_country. The presence of the value in this field depends on the value in the city field.

`inferred_state`: This is a system-generated field. normalized state names, similar to the inferred_country. The presence of a value in the field depends on the value in the state field.

`post_date`: The date when this job is posted as given in the page.

`job_description`: The description of the job as given in the page.

`html_job_description`: The job description in HTML format as given in the job page.

`job_type`: The type of the job as given in the page. 

`salary_offered`: The salary offered for the job as given in the page.

`job_board`: The normalized value of the job board name from where the job is taken.

`cursor`: This is a system-generated field. The incremental unique value for each job. Used for pagination when the client or internal team wants to fetch a bulk amount of jobs in an incremental manner.

`contact_email`: The contact email as given in the page. Always not present.

`contact_phone_number`: The contact phone number as given in the page. Always not present.

`uniq_id`: The system generates a unique id for each job.

`category`: the category as given in the page or from the URL pattern.

`inferred_iso3_lang_code`: This is a system-generated field representing the language of the job posting. Internally it depends on the field job_post_lang.

`valid_through`: this refers to the validity date for that job

`has_expired`: This is a system-generated field. Default values are false. It will be true if the system found the job to be expired.

`latest_expiry_check_date`:  This is a system-generated field. The date which the system last checked for the expiry status of this particular job posting.

`duplicate_status`: This is a system-generated field. Default is 'NA', If the current job is found to be duplicate/ very similar to another job it will be marked as 'yes'. If it's not duplicate or very similar to any other job it will be marked as 'no'.

`duplicate_of`: This is a system-generated field. If the system finds this job to be duplicate/very similar to another job, that jobs id will be updated here since this job is a duplicate of that job.

`inferred_department_name`: This is a system-generated field. This field denotes the department to which a job belongs to, infered by our specialized ML model.

`inferred_department_score`: This is a system-generated field. This field denotes the confidence score of the infered deparment name.

`inferred_job_title`: This is a system-generated field. This field contains only the important information in a job title.

`is_remote`: This is a system-generated field. This field denotes if a job posting is for a remote position or not.

`inferred_salary_currency`: This is a system-generated field. This field denotes the currency in which the salary is represented.

`inferred_salary_time_unit`: This is a system-generated field. This field denotes the time unit for which the salary is give. Eg: Monthly, Yearly, Weekly and so on.

`inferred_salary_from`: This is a system-generated field. This field denotes the minimum/starting salary for the job.

`inferred_salary_to`: This is a system-generated field. This field denotes the maximum salary for the job.

`inferred_company_type`: This is a system-genrated field. This field denotes the type of company who posted the job, like agency or company. This field is infered by our specialized ML model.

`inferred_company_type_score`: This is a system-generated field. This field denotes the confidence score of the inferred company type.

`inferred_skills`: This is a system-generated field. This field contains all the skills listed in the job description. This field is inferred by our specialized ML model. To get the list of all possible skill sets chceck this link https://app.jobspikr.com/skill_set_.txt

## API Changelog

* 2019-12-21 : Added option for freshness check
* 2019-11-18 : Added Job status API
* 2020-08-01 : Added `inferred_department_*` fields
* 2020-08-01 : Added `inferred_job_title` field
* 2020-08-21 : Added `is_remote` field
* 2020-10-21 : Added `inferred_salary_*` fields
* 2020-10-21 : Added `inferred_company_type_*` fields


# Group Job Search API

## Endpoint Details [/data]

### Job Search Using POST Requests [POST]

This endpoint is the workhorse of the API.  the backbone of API can Regular job searches. Please note that even though this is a GET request, even the POST request gives the same result. Which we have illustrated later

#### Fields in Request Header

- client_id `String` `REQUIRED` - This is your unique client identification string to access JobsPikr API

- client_auth_key `String` `REQUIRED` - This your unique client authentication key to access JobsPikr API

Both `client_id` and `client_auth_key` can be obtained from here. https://app.jobspikr.com/my/api_keys. 

Please use Sandbox API credentials for testing our API responses, so that your job credits are not deducted  while testing our API.

#### Fields in Request Body

- search_query_json `JSON` `REQUIRED` - Search query generated by you for which the data will be returned. This search query string takes a JSON object as input. More information on this field can be found [here](#reference/examples/job-search-api)

- size `String` `OPTIONAL`-  The number of records to be returned for this request. It can be between 10 and 100. This is an optional parameter with a default value of 100. Size should not be a part of search query JSON and should be always sent separately as mentioned here.

- format `String` `OPTIONAL` - The format of the response from API. It can be either 'JSON' or 'XML'. This is an optional parameter with a default value of 'JSON'.

- cursor `String` `OPTIONAL` - This for pagination. API response can contain a maximum of 100 records but if there are 2000 records present and to get everything, you can use this cursor argument. This argument should not be mentioned inside of _search_query_json_ and should always be sent separately.
Please check [How to use cusor?](#introduction/cursor-in-api-query-for-pagination/how-to-use-the-cursor?) for learning more about cusor.


#### Fields in Response Body

Depending upon whether 'JSON' or 'XML' was passed in the format field of the query,  A JSON or XML object will be returned all the following properties.

- status - The status of the response. It can be either these three
    
    _'success'_, if the request is processed successfully and data is returned.

    _'no_data'_ in case the request processes  successfully but there is no more data present for the given query.

    _'error'_ in case of some problem with processing the request.

- message -  The message explaining the status of the response.
- total_count - Number of records present in total for the query given in the request. If this number is more than 100 or the size specified in the request, you can use the `next_cursor` from the response as `cursor` in subsequent request to get all the data.
- job_credit_remaining -  Number of job data that is left to be consumed as per the plan subscription.
- job_data - An array of objects of job data. The format  could be JSON or XML, depending upon what was passed in the format field in the query.
- next_cursor - The cursor to be used in the next request  to get the subsequent data for the query.
- size - Number of records present in the current response.

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"software developer\""
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)
    
    + Body
    
            {
                "status": "success",
                "message": "Data present.",
                "next_cursor": 1576566168294049,
                "total_count": 8,
                "size": 8,
                "job_credit_remaining": 65459,
                "job_data": [
                {
                "job_type": "Full Time",
                "cursor": 1576562594581424,
                "inferred_country": "Sweden",
                "country": "SE",
                "crawl_timestamp": "2019-12-17 05:15:35 +0000",
                "city": "Stockholm",
                "inferred_city": "Stockholm",
                "html_job_description": "Job Description\nVi letar just nu efter en skicklig kommunikatör till Worldlines….",
                "url": "https://www.careerbuilder.se/jdp/technical-writer-till-worldline-j3m0gr790pp56wvksmh",
                "geo": "se",
                "uniq_id": "3414773dd9c696848062a23e499df7fc",
                "job_description": "Vi letar just nu efter en skicklig kommunikatör till Worldlines dynamiska team! I den här….",
                "job_board": "careerbuilder",
                "state": "Stockholms län",
                "inferred_state": "Stockholm",
                "post_date": "2019-12-16",
                "company_name": "Academic Work",
                "category": "Sales Engineers",
                "job_title": "Technical Writer till Worldline"
                },
                ]
            }
        
    + Attributes

        + status - Status of the response. It can have one of the 3 values : 'success', 'no_data' or 'error'
        + message - Message explaining the status of the response
        + next_cursor -  The cursor to be used in the next request to get the subsequent data for the query.
        + `total_count` -  Number of records present for the query in request. If this number is more than 100 or the size specified in the request, you can use the `next_cursor` in subsequent request to get all the data.
        + size - Number of records  present in the current response
        + job_credit_remaining -   Number of job data that is left to be consumed as per the plan subscription.
        + job_data -  An array of objects of job data. The format  could be JSON or XML, depending upon what was passed in the format field in the query


### Job Search Using GET Request [GET]

Instead of using a [post request](https://jobspikr.docs.apiary.io/#reference/job-search-api/endpoint-details/job-search-using-post-requests), 
you can use get request as well to get job records. All the header parameter, body parameters are the same for both `POST` and `GET` request.

Few libraries don’t support adding body to a GET request, hence we've enabled POST request as well for all the endpoints discussed in this documentation. 

That said, this documentation tool that we've used also doesn't support body in GET request, hence trying out this particular request in the right-side console won't work.

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"techincal writer\""
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor: cursor_value (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - The format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)
    
    + Body
    
            {
                "status": "success",
                "message": "Data present.",
                "next_cursor": 1576566168294049,
                "total_count": 8,
                "size": 8,
                "job_credit_remaining": 65459,
                "job_data": [
                {
                "job_type": "Full Time",
                "cursor": 1576562594581424,
                "inferred_country": "Sweden",
                "country": "SE",
                "crawl_timestamp": "2019-12-17 05:15:35 +0000",
                "city": "Stockholm",
                "inferred_city": "Stockholm",
                "html_job_description": "Job Description\nVi letar just nu efter en skicklig kommunikatör till Worldlines….",
                "url": "https://www.careerbuilder.se/jdp/technical-writer-till-worldline-j3m0gr790pp56wvksmh",
                "geo": "se",
                "uniq_id": "3414773dd9c696848062a23e499df7fc",
                "job_description": "Vi letar just nu efter en skicklig kommunikatör till Worldlines dynamiska team! I den här….",
                "job_board": "careerbuilder",
                "state": "Stockholms län",
                "inferred_state": "Stockholm",
                "post_date": "2019-12-16",
                "company_name": "Academic Work",
                "category": "Sales Engineers",
                "job_title": "Technical Writer till Worldline"
                },
                ]
            }
        
    + Attributes

        + status - Status of the response. It can have one of the 3 values: 'success', 'no_data' or 'error'
        + message - Message explaining the status of the response
        + `total_count` - Number of records present for the query in request. If this number is more than 100 or the size specified in the request, you can use the `next_cursor` in subsequent request to get all the data.
        + next_cursor - The cursor to be used in the next request to get the subsequent data for the query.
        + size - Number of records  present in the current response
        + job_credit_remaining -   Number of job data that is left to be consumed as per the plan subscription.
        + job_data -  An array of objects of job data. The format could be JSON or XML, depending upon what was passed in the format field in the query


# Group Job Status API


## Endpoint Details [/active_jobs_checker]

### Check if jobs are still active using POST request [POST]

`NOTE:`

    If you are new to API please skip this endpoint and try  please use [expired_jobs endpoint](#reference/expired-jobs-api). If you are already using this, please migrate to  please use [expired_jobs endpoint](#reference/expired-jobs-api). We will stop supporting this endpoint soon.

Here you can pass a list of `uniq_ids` or `job_urls` to check the current status of those jobs on their respective source websites.

#### Fields in Request Header

- client_id `String` `REQUIRED` - This is your unique client identification string to access JobsPikr API

- client_auth_key `String` `REQUIRED` - This your unique client authentication key to access JobsPikr API

Both `client_id` and `client_auth_key` can be obtained from here. https://app.jobspikr.com/my/api_keys. 

#### Fields in Request Body

- uniq_ids `Array[String]` `Conditionally REQUIRED`: Uniq ids of the job data that is consumed from JobsPikrAPI in an array. Either uniq_ids or job_urls must be present in the request body.
- job_urls `Array[String]` `Conditionally REQUIRED` : Job URLs of the job data that is consumed from JobsPikrAPI in an array. Either uniq_ids or job_urls must be present in the request body.

- format `OPTIONAL`: The format of the response from the API. It’s an optional field with the default value as JSON.


#### Fields in Response Body

Depending upon whether 'JSON' or 'XML' was passed in format field of the query,  A JSON or XML object will be returned all the following properties.

- status: The status of the response. It can have one of 2 values: 'success' or 'error'.

- message: The message explaining the status of the response

- active_check_remaining_credits: Number of remaining jobs active/inactive status check credits for your organization

- job_data : Array of all the job data based on the uniq ids passed in the request with information related to the active/inactive status of the job.

- missing_uniq_ids :  An Array of all uniq_ids passed which doesn't have a matching job present.

- missing_job_urls : An Array of all job_urls passed which doesn't have a matching job present.

+ Request (application/json)

    + Body
        
            {
            "uniq_ids": [
            "ac754bb31ec4be4cab4ac56051a71115",
            "749755fab2400b6d1b9dfd4de8b47b82",
            "9031f9822ce05123e1c1f85a17681731",
            "1031f982281e0512121c1f85a17js173"
            ]
            }
    + Headers 

            client_id: Replace with your client_id
            client_auth_key:  Replace with your client_auth_key
    
    + Attributes
            
        + `uniq_ids` : `uniq_ids` (string,optional) - Uniq ids of the job data that is consumed from JobsPikrAPI in an array. Either `uniq_ids or job_urls` must be present in the request body.
        + `job_urls` : `job_urls` (string,optional) - Job urls of the job data that is consumed from JobsPikrAPI in an array. Either `uniq_ids` or `job_urls` must be present in the request body.
        + format: json (string) -  Format of the response from API. It can be either 'JSON' or 'xml'. This is an optional parameter with a default value of 'JSON'
            

+ Response 200 (application/json)

    + Body
        
            {
                "status": "success",
                "message": "Data present.",
                "freshness_check_remaining_credits": 9135,
                "job_data": [
                { 
                    "uniq_id":"ac754bb31ec4be4cab4ac56051a71115",
                    "url": "https://www.reed.co.uk/jobs/fleet-administrator-maternity-cover/39571333?source=searchResults#/jobs/admin-secretarial-pa-jobs?sortby=DisplayDate",
                    "has_expired": "false",
                    "latest_expiry_check_date": "2019-12-17",
                    "post_date": "2019-12-16"
                },
                {
                    "uniq_id": "749755fab2400b6d1b9dfd4de8b47b82",
                    "url": "https://www.reed.co.uk/jobs/customer-service-administrator/39573809?source=searchResults#/jobs/admin-secretarial-pa-jobs?sortby=DisplayDate",
                    "has_expired": "false",
                    "latest_expiry_check_date": "2019-12-17",
                    "post_date": "2019-12-16"
                }
                       ],
                "missing_uniq_ids": [
                    "9031f9822ce05123e1c1f85a17681731",
                    "1031f982281e0512121c1f85a17js173"
                    ]
            } 
        
    + Attributes

        + status - The status of the response. It can have one of 2 values - 'success' or 'error' .
        + message - The message explaining the status of the response
        + active_check_remaining_credits - Number of remaining job active/inactive status check credits for your organization
        + job_data - Array of all the job data based on the `uniq_ids` passed in the request with information related to the active/inactive status of the job.
        + missing_uniq_ids - An Array of all uniq_ids passed which doesn't have a matching job present.
        + missing_job_urls - An Array of all job_urls passed which doesn't have a matching job present.
      
### Check if jobs are still active using GET request [GET]

Instead of using a [post request](#reference/job-status-api/endpoint-details/check-if-jobs-are-still-active-using-post-request), 
you can use get request as well to get current status of job records. All the header parameter, body parameters are same for both `POST` and `GET` request.

Few libraries don’t support adding body to a GET request, hence we've enabled POST request as well for all the endpoints discussed in this documentation. 

That said, this documentation tool that we've used also doesn't support the body in GET request, hence trying out this particular request in the right-side console won't work.


+ Request (application/json)

    + Body
        
            {
            "uniq_ids": [
            "ac754bb31ec4be4cab4ac56051a71115",
            "749755fab2400b6d1b9dfd4de8b47b82",
            "9031f9822ce05123e1c1f85a17681731",
            "1031f982281e0512121c1f85a17js173"
            ]
            }
    + Headers 

            client_id: Replace with your client_id
            client_auth_key:  Replace with your client_auth_key
    
    + Attributes
            
            + `uniq_ids` : `uniq_ids` (array[string],optional) Uniq ids of the job data that is consumed from JobsPikrAPI in an array. Either `uniq_ids` or `job_urls` must be present in the request body.
            + `job_urls` : `job_urls` (array[string],optional) - Job urls of the job data that is consumed from JobsPikrAPI in an array. Either `uniq_ids` or `job_urls` must be present in the request body.
            + format: JSON (string) -  Format of the response from API. It can be either 'JSON' or 'XML'. This is an optional parameter with a default value of 'JSON'
            

+ Response 200 (application/json)

    + Body
        
            {
                "status": "success",
                "message": "Data present.",
                "freshness_check_remaining_credits": 9135,
                "job_data": [
                { 
                    "uniq_id":"ac754bb31ec4be4cab4ac56051a71115",
                    "url": "https://www.reed.co.uk/jobs/fleet-administrator-maternity-cover/39571333?source=searchResults#/jobs/admin-secretarial-pa-jobs?sortby=DisplayDate",
                    "has_expired": "false",
                    "latest_expiry_check_date": "2019-12-17",
                    "post_date": "2019-12-16"
                },
                {
                    "uniq_id": "749755fab2400b6d1b9dfd4de8b47b82",
                    "url": "https://www.reed.co.uk/jobs/customer-service-administrator/39573809?source=searchResults#/jobs/admin-secretarial-pa-jobs?sortby=DisplayDate",
                    "has_expired": "false",
                    "latest_expiry_check_date": "2019-12-17",
                    "post_date": "2019-12-16"
                }
                       ],
                "missing_uniq_ids": [
                    "9031f9822ce05123e1c1f85a17681731",
                    "1031f982281e0512121c1f85a17js173"
                    ]
            } 
        
    + Attributes

        + status - The status of the response. It can have one of 2 values - 'success' or 'error' .
        + message - The message explaining the status of the response
        + active_check_remaining_credits - Number of remaining jobs active/inactive status check credits for your organization
        + job_data - Array of all the job data based on the uniq_ids passed in the request with information related to the active/inactive status of the job.
        + missing_uniq_ids - An Array of all uniq_ids passed which doesn't have a matching job present.
        + missing_job_urls - An Array of all job_urls passed which doesn't have a matching job present.


# Group Expired Jobs API


## Endpoint Details [/expired_jobs]

### Get all the jobs expired on a given date(previously consumed) [POST]

Here you can get all the consumed jobs that are, expired in the given date range.

#### Fields in Request Header

- client_id `String` `REQUIRED` - This is your unique client identification string to access JobsPikr API

- client_auth_key `String` `REQUIRED` - This your unique client authentication key to access JobsPikr API

Both `client_id` and `client_auth_key` can be obtained from here. https://app.jobspikr.com/my/api_keys. 

#### Fields in Request Body

- size `Integer` `OPTIONAL`: The number of records to be returned for this request. It can be between 10 and 100. This is an optional parameter with a default value of 100. Size should not be a part of search query JSON and should be always sent separately as mentioned here.

- cursor `String` `OPTIONAL` - This for pagination. API response can contain a maximum of 100 records but if there are 2000 records present and to get everything, you can use this cursor argument. This argument should not be mentioned inside of search_query_json and should always be sent separately. Please check How to use cusor? for learning more about cusor.

- from_date `String` `OPTIONAL` - This field is to specify the date from which the expired jobs should be queries. All the consumed jobs, expired on or after this date will be returned. It should be in the format `YYYY-MM-DD`. The default value is the current date.

- to_date `String` `OPTIONAL` - This field is to specify the date from which the expired jobs should be queries. All the consumed jobs, expired on or before this date will be returned. It should be in the format `YYYY-MM-DD`. The default value is the current date.

- format `OPTIONAL`: The format of the response from the API. It’s an optional field with the default value as JSON.


#### Fields in Response Body

Depending upon whether 'JSON' or 'XML' was passed in format field of the query,  A JSON or XML object will be returned all the following properties.

- status - The status of the response. It can be either these three
    
    _'success'_, if the request is processed successfully and data is returned.

    _'no_data'_ in case the request processes  successfully but there is no more data present for the given query.

    _'error'_ in case of some problem with processing the request.

- message -  The message explaining the status of the response.
- total_count - Number of expired records present for the given date. If this number is more than 100 or the size specified in the request, you can use the `next_cursor` from the response as `cursor` in subsequent request to get all the data.
- expired_jobs - An array of objects of job data that got expired in the given date. The format  could be JSON or XML, depending upon what was passed in the format field in the query.
- next_cursor - The cursor to be used in the next request  to get the subsequent data for the query.
- size - Number of records present in the current response.

`NOTE:`
    Sandbox response for this endpoint, returns only the same response for any number of request.

+ Request (application/json)

    + Body
        
            {
                "size": "10",
                "date": "2020-10-20"
            }
    + Headers 

            client_id: Replace with your client_id
            client_auth_key:  Replace with your client_auth_key
    
    + Attributes
            
        + size : `size` (string,optional) - The number of records to be returned for this request. It can be between 10 and 100. This is an optional parameter with a default value of 100. Size should not be a part of search query JSON and should be always sent separately as mentioned here.
        + cursor : `cursor` (string,optional) - This for pagination. API response can contain a maximum of 100 records but if there are 2000 records present and to get everything, you can use this cursor argument. This argument should not be mentioned inside of search_query_json and should always be sent separately. Please check How to use cusor? for learning more about cusor.
        + from_date : `from_date` (string,optional) - This field is to specify the date from which the expired jobs should be queries. All the consumed jobs, expired on or after this date will be returned. It should be in the format `YYYY-MM-DD`. The default value is the current date.
        + to_date : `to_date` (string,optional) - This field is to specify the date from which the expired jobs should be queries. All the consumed jobs, expired on or before this date will be returned. It should be in the format `YYYY-MM-DD`. The default value is the current date.
        + format : `format` (string,optional) - The format of the response from the API. It’s an optional field with the default value as JSON.


+ Response 200 (application/json)

    + Body
        
            {
                "status": "success",
                "message": "Data present.",
                "total_count": 2521,
                "size": 50,
                "next_cursor": 1602273627739147,
                "expired_jobs": [
                {
                    "uniq_id": "33b145f9ce4ebb1b9dc71b35b478c8e0",
                    "url": "https://www.indeed.fr/voir-emploi?jk=5a06c36a232c06cb",
                    "has_expired": true,
                    "latest_expiry_check_date": "2020-10-19",
                    "post_date": "2020-10-05",
                    "cursor": 1602201625494528
                },
                {
                    "uniq_id": "096970dca1dd0154331d57a2abaff448",
                    "url": "https://offre-demploi.monster.fr/assistant-adminstrative-et-comptable-h-f-saverdun-occ-fr-randstad/220797855",
                    "has_expired": true,
                    "latest_expiry_check_date": "2020-10-19",
                    "post_date": "2020-10-04",
                    "cursor": 1602201625597926
                },
                {
                    "uniq_id": "72d2052e2070b7658010a0f374a1d5ff",
                    "url": "https://www.indeed.co.uk/viewjob?jk=f03a61fa2b0d708e",
                    "has_expired": true,
                    "latest_expiry_check_date": "2020-10-19",
                    "post_date": "2020-10-05",
                    "cursor": 1602201625899236
                },
                ...
                ]

            } 
        
    + Attributes

        + status - The status of the response. It can be either these three
        + message -  The message explaining the status of the response.
        + total_count - Number of expired records present for the given date. If this number is more than 100 or the size specified in the request, you can use the `next_cursor` from the response as `cursor` in subsequent request to get all the data.
        + expired_jobs - An array of objects of job data that got expired in the given date. The format  could be JSON or XML, depending upon what was passed in the format field in the query.
        + next_cursor - The cursor to be used in the next request  to get the subsequent data for the query.
        + size - Number of records present in the current response.


# Group Aggregation API 

## Endpoint details [/aggregate_data]

### Retrieve Aggregate Data [GET]

In the example below, we'll illustrate the API params as well as an example to aggregate job query ''technical write' to aggregate by company name and country. Like other endpoints in  JobsPikr, here too GET and POST both request types will work. Later In the POST example, we'll illustrate aggregation by company name and post date.

#### Fields in Request Header

- client_id `String` `REQUIRED` - This is your unique client identification string to access JobsPikr API

- client_auth_key `String` `REQUIRED` - This is your unique client authentication key to access JobsPikr API

Both `client_id` and `client_auth_key` can be obtained from here. https://app.jobspikr.com/my/api_keys. 

#### Fields in Request Body

- search_query_json (String, REQUIRED) - Search query generated by you for which the data will be returned. This search query string takes a JSON object as input. To know more about how to construct the search query please [read this](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?) or explore our [query builder](https://app.jobspikr.com/my/query_builder). In case of aggregate API, instead of returning the job data for this request, the given aggregation will be applied on top of this query.
- aggregate_by (String, REQUIRED) - The JSON which instructs the API to aggregate based on the fields provided. Two levels of aggregation are possible(TODO)


Some notes w.r.t aggregate_by parameter

- ‘field_1’ mentions the field on the top of which the top-level aggregation should be done on.
- ‘size_1’ mentions the number of aggregated results that should be returned from the API for top level aggregation.
- field_2 mentions the field on the top of which the sub aggregation should be done.
- ‘size_2’ mentions the number of aggregated results that should be from API for sub aggregation.
Please note that field_1 or field_2 must be from the following list - ‘company_name’, ‘inferred_country’, ‘post_date’ and If the field parameter is ‘post_date’ then ‘size’ parameter is not required, instead ‘interval’ parameter should be used(value for 'interval' can only be month or quarter
W.r.t size.  size parameters(size_1, size_2) when used can’t go above 10000.  If only one level of aggregation is used, size_1 should be  <= 10000. If two level of aggregations are used, size_1 + (size_1 * size_2) should be <= 10000


+ Request (application/json)

    + Body
        
            {
                "search_query_json": {
                "query_string": {
                "default_field": "job_title",
                "query": "\"technical writer\""
                }
                },

                "aggregate_by": {
                "field_1": "company_name",
                "size_1": 100,
                "field_2": "inferrect_country",
                "size_2": 10
                }
            }
            
            

    + Headers 

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key
                

    + Attributes
    
        + `search_query_json`: `search_query_json`(string,REQUIRED) - Same as used throughout in jobspikr API, here  instead of returning the job data for this request, the given aggregation will be applied on top of this query.
        + `aggregate_by`: `aggregate_by` (string,REQUIRED) -  The json which instructs the API to aggregate based on the fields provided. Two levels of aggregation are possible

+ Response 200 (application/json)

    + Body
        
            {
                "status": "success",
                "message": "Data present.",
                "freshness_check_remaining_credits": 9135,
               
            } 
        
    + Attributes

        + status - The status of the response. It can have one of 2 values - 'success' or 'error' .
        + message - The message explaining the status of the response
        + active_check_remaining_credits - Number of remaining jobs active/inactive status check credits for your organization
        + job_data - Array of all the job data based on the uniq ids passed in the request with information related to the active/inactive status of the job.
        + missing_uniq_ids - An Array of all uniq_ids passed which doesn't have a matching job present.
        + missing_job_urls - An Array of all job_urls passed which doesn't have a matching job present.

### Retrieve  Aggregate Data [POST]

In the example below, we'll illustrate the API params as well as an example to aggregate job query ''technical write' to aggregate by company name and country. Like other endpoints in JobsPikr, here too GET and POST both request types will work. Later In the POST example, we'll illustrate aggregation by company name and post date.

#### Fields in Request Header

- client_id `String` `REQUIRED` - This is your unique client identification string to access JobsPikr API

- client_auth_key `String` `REQUIRED` - This your unique client authentication key to access JobsPikr API

Both `client_id` and `client_auth_key` can be obtained from here. https://app.jobspikr.com/my/api_keys. 

#### Fields in Request Body

- search_query_json (String, REQUIRED) - Search query generated by you for which the data will be returned. This search query string takes a JSON object as input. To know more about how to construct the search query please read this or explore our query builder. In case of aggregate API, instead of returning the job data for this request, the given aggregation will be applied on top of this query.
- aggregate_by (String,REQUIRED) - The json which instructs the API to aggregate based on the fields provided. Two levels of aggregation are possible

Some notes w.r.t aggregate_by parameter

- ‘field_1’ mentions the field on top of which the top-level aggregation should be done on.
- ‘size_1’ mentions the number of aggregated results that should be returned form the API for top level aggregation.
- field_2 mentions the field on top of which the sub aggregation should be done on.
- ‘size_2’ mentions the number of aggregated results that should be from api for sub aggregation.
Please note that field_1 or field_2 must be from the following list - ‘company_name’, ‘inferred_country’, ‘post_date’ and If the field parameter is ‘post_date’ then ‘size’ parameter is not required, instead ‘interval’ parameter should be used(value for 'interval' can only be month or quarter
W.r.t size.  size parameters(size_1, size_2) when used can’t go above 10000.  If only one level of aggregation is used size_1 should be  <= 10000 If two level of aggregations are used size_1 + (size_1 * size_2) should be <= 10000


+ Request (application/json)

    + Body
        
            {
                "search_query_json": {
                "query_string": {
                "default_field": "job_title",
                "query": "\"technical writer\""
                }
                },

                "aggregate_by": {
                "field_1": "company_name",
                "size_1": 100,
                "field_2": "post_date",
                "interval": "month"
                }
            }
            
            


    + Headers 

            client_id: Replace with your client_id
            client_auth_key:  Replace with your client_auth_key

    + Attributes
    
        + `search_query_json` : `search_query_json` (string,REQUIRED) - Same as used throught in jobspikr API, here  instead of returning the job data for this request, the given aggregation will be applied on top of this query.
        + `aggregate_by` : `aggregate_by` (string,REQUIRED) -  The json which instructs the API to aggregate based on the fields provided. Two levels of aggregation are possible

+ Response 200 (application/json)

    + Body
        
            {
                "status": "success",
                "message": "Data present.",
                "freshness_check_remaining_credits": 9135,
               
            } 
        
    + Attributes

        + status - The status of the response. It can have one of 2 values - 'success' or 'error' .
        + message - The message explaining the status of the response
        + active_check_remaining_credits - Number of remaining job active/inactive status check credits for your organization
        + job_data - Array of all the job data based on the uniq ids passed in the request with information related to the active/inactive status of the job.
        + missing_uniq_ids - An Array of all uniq_ids passed which doesn't have a matching job present.
        + missing_job_urls - An Array of all job_urls passed which doesn't have a matching job present.


# Group Examples

## Job Search API [/data]

In this section we'll cover some common use cases. You may use these as starting template and try out various changes. Another helpful tool for playing around with query is
our API Query Builder at https://app.jobspikr.com/my/query_builder

### Get all jobs with marketing in title [POST]

To get all jobs with marketing in title we can use `query_string` query. This query takes `default_field or fields` mentioning the field(s) where the query should be run and `query`
which mentions the value that needs to be matched. In this case the query will look like this
```
    "query_string": {
        "default_field": "job_title",
        "query": "marketing"
    }
```

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "marketing"
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'JSON' or 'XML'. This is an optional parameter with a default value of 'JSON'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)
    
+ Response 200 (application/json)
    

### Get all jobs with marketing in title in XML format [POST]

Our API responses can be of _json_ of _xml_. By default all our API responses are in _json_ format. If we need get the results
in _xml_ format we can use the `format` parameter with the value as `xml`.

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "format": "xml",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "marketing"
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'JSON' or 'XML’. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

+ Response 200 (application/json)

    
### Get all jobs with sales in description [POST]

To get all the jobs with _sales_ in the description, we can use `query_string` query with `job_description` as the value for the `default_field`.
```
    "query_string": {
        "default_field": "job_description",
        "query": "sales"
    }
```

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_description",
                    "query": "sales"
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

+ Response 200 (application/json)

### Find all jobs with "python developer" in job title [POST]

When we want to find all jobs with "python developer" or any phrase in the same order of words we should enclose the phrase in double quotes 
while providing it as a value to the query in the query_string object. This is quering for exact match.

```
  "query_string": {
    "fields": "job_title",
    "query": "\"python developer\""
  }

```
*Note:* In this case, if double quotes are not used around the phrase(python developer), then all the jobs that have either python or developer or 
both in any order would be returned as response from the API.

+ Request (application/json)
  
    + Body
            
         {
                "size": 50,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"python developer\""
                                    }
                                }
            }
        
        
    + Headers
    
    
                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)
    
### Find all jobs with "java developer" in either job title or job description [POST]

When we want to find the presence of a word or phrase in more than one field, we should pass those field names as an array to `fields` in the `query_string` query object.
Here we should pass `["job_title", "job_description"]` as value to `fields` 

```
  "query_string": {
    "fields": ["job_title", "job_description"],
    "query": "\"java developer\""
  }

```

+ Request (application/json)
  
    + Body
            
         {
                "size": 50,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "fields": ["job_title", "job_description"],
                    "query": "\"java developer\""
                                    }
                                }
            }
        
        
    + Headers
    
    
                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)
    

### Find all jobs with sales or marketing in title [POST]

To get all the jobs with either sales or marketing present in the title we can join those words with the keyword `OR` while passing as value to the query.
```
"query_string": {
    "fields": "job_title""
    "query": "sales OR marketing"
  }
```

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "sales OR marketing"
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)


### Find all jobs with "python developer" or "java developer" in title [POST]

To get all the jobs with either "python developer" or "java developer" present in the title we can use the same `OR` keyword between the phrases and pass it as value to the query.
```
"query_string": {
    "fields": "job_title",
    "query": "\"python developer\"" OR "\"java developer\""
  }
```

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "format": "json",
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"sales manager\" OR \"marketing manager\""
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)


+ Response 200 (application/json)


### Find all jobs from London, United Kingdom [POST]

To get all the jobs from 'London, United Kingdom', we have to use `bool` query with `must` condition. The query will look like this
```
  "bool": {
    "must": [
      {
        "query_string": {
          "fields": [
            "country",
            "inferred_country"
          ],
          "query": "\"United Kingdom\" OR \"England\" OR \"UK\""
        }
      },
      {
        "query_string": {
          "fields": [
            "city",
            "inferred_city"
          ],
          "query": "\"London\""
        }
      }
    ]
  }
```
* Here there are two queries inside must, each checking for country match and city match respectively. We use `must`, because, the results returned
will satisfy both the queries specified inside must.
* Instead of just city London, we check for city London and country United Kingdom because city names are not unique. There are city with name 'London' in
The United States and Canada as well. Hence to be more specific we use both city and country.
* We search for 'London' in both  “city” and “inferred city” fields and 'United Kingdom' in both “country” and “inferred country” fields to give us better coverage.
* Try to use all city, state and country along with respective inferred fields in all your custom queries for better results.


+ Request (application/json)
  
    + Body
            
        {
            "size": 50,
            "format": "json",
            "search_query_json": {
                "bool": {
                    "must": [
                        {
                            "query_string": {
                                "fields": [
                                    "country",
                                    "inferred_country"
                                ],
                                "query": "\"United Kingdom\" OR \"England\" OR \"UK\""
                            }
                        },
                        {
                            "query_string": {
                                "fields": [
                                    "city",
                                    "inferred_city"
                                ],
                                "query": "\"London\""
                            }
                        }
                    ]
                }
            }
        }
        
        
    + Headers
    
    
                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. The default value is 100
    + cursor (optional, string) - It is used for pagination when a number of records are more than 100. Please check the details in the introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)


### Find all jobs from Texas, United States [POST]

To get all the jobs from 'Texas, United States', we have to use the same `bool` query with `must` condition. The query will look like this
```
    "bool": {
      "must": [
        {
          "query_string": {
            "fields": [
              "country",
              "inferred_country"
            ],
            "query": "\"United Kingdom\" OR \"England\" OR \"UK\""
          }
        },
        {
          "query_string": {
            "fields": [
              "city",
              "inferred_city"
            ],
            "query": "\"London\""
          }
        }
      ]
    }

```


+ Request (application/json)
  
    + Body
            
        {
            "size": 50,
            "format": "json",
            "search_query_json": {
                "bool": {
                    "must": [
                        {
                            "query_string": {
                                "fields": [
                                    "country",
                                    "inferred_country"
                                ],
                                "query": "\"United States\" OR \"USA\" OR \"United States\" OR \"US\""
                            }
                        },
                        {
                            "query_string": {
                                "fields": [
                                    "state",
                                    "inferred_state"
                                ],
                                "query": "\"Texas\" OR \"tx\""
                            }
                        }
                    ]
                }
            }
        }
        
        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)


### Find all jobs from  Sydney, Australia OR Seattle, USA [POST]

To get the jobs from different location we should use `bool` query with `should` condition. Inside should we should use multiple `bool` queries with `must`
as given in the previous example. For the given example, to find all jobs from Sydney, Australia OR Seattle, USA, the `bool` query will look like the following.
```
  {
    "bool": {
      "should": [
        {
          "bool": {
            "must": [
              {
                "query_string": {
                  "fields": [
                    "country",
                    "inferred_country"
                  ],
                  "query": "\"Australia\""
                }
              },
              {
                "query_string": {
                  "fields": [
                    "state",
                    "inferred_state"
                  ],
                  "query": "\"New South Wales\""
                }
              },
              {
                "query_string": {
                  "fields": [
                    "city",
                    "inferred_city"
                  ],
                  "query": "\"Sydney\""
                }
              }
            ]
          }
        },
        {
          "bool": {
            "must": [
              {
                "query_string": {
                  "fields": [
                    "country",
                    "inferred_country"
                  ],
                  "query": "\"United States\" OR \"USA\" OR \"United States\" OR \"US\""
                }
              },
              {
                "query_string": {
                  "fields": [
                    "state",
                    "inferred_state"
                  ],
                  "query": "\"Washington\" OR \"wa\""
                }
              },
              {
                "query_string": {
                  "fields": [
                    "city",
                    "inferred_city"
                  ],
                  "query": "\"Seattle\""
                }
              }
            ]
          }
        }
      ]
    }
  }
```
Here the `should` condition acts as `OR` and must condition acts as `AND`. Hence the query that is given above states
```
    ((city: Sydney) AND (state: New South Wales) AND (country: Australia)) OR ((city: Seattle) AND (state: Washington) AND (country: United States))
```

+ Request (application/json)
  
    + Body
            
    {
      "search_query_json": {
        "bool": {
          "should": [
            {
              "bool": {
                "must": [
                  {
                    "query_string": {
                      "fields": [
                        "country",
                        "inferred_country"
                      ],
                      "query": "\"Australia\""
                    }
                  },
                  {
                    "query_string": {
                      "fields": [
                        "state",
                        "inferred_state"
                      ],
                      "query": "\"New South Wales\""
                    }
                  },
                  {
                    "query_string": {
                      "fields": [
                        "city",
                        "inferred_city"
                      ],
                      "query": "\"Sydney\""
                    }
                  }
                ]
              }
            },
            {
              "bool": {
                "must": [
                  {
                    "query_string": {
                      "fields": [
                        "country",
                        "inferred_country"
                      ],
                      "query": "\"United States\" OR \"USA\" OR \"United States\" OR \"US\""
                    }
                  },
                  {
                    "query_string": {
                      "fields": [
                        "state",
                        "inferred_state"
                      ],
                      "query": "\"Washington\" OR \"wa\""
                    }
                  },
                  {
                    "query_string": {
                      "fields": [
                        "city",
                        "inferred_city"
                      ],
                      "query": "\"Seattle\""
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    }
        
+ Headers


                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)


### Find all jobs where salary exists [POST]

Not all the job records have a `salary_offered` field since they are not provided in the source page itself. To get only jobs that have `salary_offered`
Fthe field we can use the `exists` query specifying the field name as a value for the `field` key in the query.
```
    "exists": {
      "field": "salary_offered"
    }
```

+ Request (application/json)
  
    + Body
            
    {
        "size": 50,
        "format": "json",
        "search_query_json": {
            "exists": {
                "field": "salary_offered"
            }
        }
    }

        
    + Headers
                
                
                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)


+ Response 200 (application/json)

### Find all jobs where any one of the contact details exists [POST]

Like `salary_offered` field, not all the job records have `contact_email` and `contact_phone_number` fields since they are not provided in the source page itself. 
To get only jobs that have either `contact_email` or `contact_phone_number` or both, we can use the `exists` query inside a `bool` query with `should` condition.
```
    "exists": {
      "field": "salary_offered"
    }
```

+ Request (application/json)
  
    + Body
            
    {
      "size": 50,
      "format": "json",
      "search_query_json": {
        "bool": {
          "should": [
            {
              "exists": {
                "field": "contact_phone_number"
              }
            },
            {
              "exists": {
                "field": "contact_email"
              }
            }
          ]
        }
      }
    }


        
    + Headers
                
                
                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)


+ Response 200 (application/json)


### Find all the jobs which don't have Undefined in the job type [POST]

Few of the job records have 'Undefined' as the value for `job_type` field. This is because not all the jobs have a job type mentioned in the source URL.
If we want to get only the job records which have a valid `job_type` mentioned, we can query for all jobs that don’t have 'Undefined' as the job type.

To ignore records based on the value we can use `bool` query with `must_not` condition. The query for our use case will look like below
```
        "bool": {
          "must_not": [
            {
              "query_string": {
                "fields": [
                  "job_type"
                ],
                "query": "undefined"
              }
            }
          ]
        }
```

+ Request (application/json)
  
    + Body
            
    {
      "size": 50,
      "format": "json",
      "search_query_json": {
        "bool": {
          "must_not": [
            {
              "query_string": {
                "fields": [
                  "job_type"
                ],
                "query": "undefined"
              }
            }
          ]
        }
      }
    }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)


### Find all the jobs posted between 1st July 2019 and 7th July 2019 [POST]

To find all the jobs posted between a date range, we can use the range query. Since we have to find a job between a date range based on `post_date`, we should
mention it as the field in the range query.
```
    {
      "range": {
        "post_date": {
          "gte": "2019-07-01",
          "lte": "2019-07-07"
        }
      }
    }
```

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "format": "json",
                "search_query_json": {
                    "range": {
                        "post_date": {
                        "gte": "2019-07-01",
                        "lte": "2019-07-07"
                                    }
                                }
                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)


### Find all jobs posted between 1st July 2019 and 7th July 2019 and has salary offered field present [POST]

To get all the jobs which are posted between a specific date range and has a salary offered field present, we can use `bool` query with `must` condition.

+ Request (application/json)
  
    + Body

        {
            "size": 50,
            "format": "json",
            "search_query_json": {
                "bool": {
                    "must": [
                        {
                            "range": {
                                "post_date": {
                                    "gte": "2019-07-01",
                                    "lte": "2019-07-07"
                                }
                            }
                        },
                        {
                            "exists": {
                                "field": "salary_offered"
                            }
                        }
                    ]
                }
            }
        }

    
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)


### Find all valid jobs(the ones which have not expired) [POST]

To get only valid jobs i.e, job which are not expired, we can use `query_string` query to get all the jobs where the `has_expired` field is false
```
 "query_string": {
    "default_field": "has_expired",
    "query": false
 }
```

+ Request (application/json)
  
    + Body
            
      {
        "size": 50,
        "format": "json",
        "search_query_json": {
          "query_string": {
            "default_field": "has_expired",
            "query": false
          }
        }
      }


        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)
    

### How to get only unique jobs after ignoring duplicates [POST]

* Applicable only for Growth Plan & Above

To get all the unique jobs deduplicated across the sources(job boards and websites) we can use `exclude_duplicates` parameter in the query.
This parameter should be used in the same level as `search_query_json` and `cursor`.
It can be used only by organizations that are in _Business Plan or Above_.


+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "exclude_duplicates": true
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"technical writer\""
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. The default value is 100
    + cursor (optional, string) - It is used for pagination when the number of records are more than 100. Please check the details in the introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'JSON' or 'xml'. This is an optional parameter with a default value of 'JSON'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)

### Get all jobs posted on job boards as well as F500 company sites [POST]

* Applicable only for Enterprise plan(released 07 Sept 2020)

To get all the jobs posted on job board and f500 company  websites,we can use `dataset` parameter in the query wiht the value ['job_board', 'f500'].
Even if the dataset is paramter is not specified, data from both job board sites and f500 sites will be returned in the response by default, the client plan has f500 sites access.
This parameter should be used in the same level as `search_query_json` and `cursor`.

+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "dataset": ["job_board", "f500"],
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"technical writer\""
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. The default value is 100
    + cursor (optional, string) - It is used for pagination when the number of records are more than 100. Please check the details in the introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'JSON' or 'xml'. This is an optional parameter with a default value of 'JSON'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)    

### Get jobs only from to F500 company websites [POST]

* Applicable only for Enterprise plan(released 07 Sept 2020)

To get all the jobs posted only on company sites, we can use `dataset` parameter in the query with the value ['f500'].
When the your plan has access to f500 dataset, by default when dataset params in not used in the request, both job board data and f500 data is returned in the API response.
If you need to get only jobs from f500 company websites, then you can specify 'dataset' : ['f500'] in the request.
This parameter should be used in the same level as `search_query_json` and `cursor`.


+ Request (application/json)
  
    + Body
            
            {
                "size": 50,
                "cursor": 1549411216369936,
                "format": "json",
                "dataset": ["f500"],
                "search_query_json": {
                "query_string": {
                    "default_field": "job_title",
                    "query": "\"technical writer\""
                                    }
                                }
            }

        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. The default value is 100
    + cursor (optional, string) - It is used for pagination when the number of records are more than 100. Please check the details in the introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'JSON' or 'xml'. This is an optional parameter with a default value of 'JSON'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)    

### Get all jobs posted by companies(not agencies) [POST]

* Applicable only for Business and Above plan(released 21 Oct 2020)

To get all the jobs posted by companies, we can use `inferred_company_type` field in the `query_string` query.

The example show how to fetch all the "python developer" jobs posted by companies. To get all the jobs posted by agenices instead of passing "company" as the value for query, we should send "agency".

Old records(jobs posted before October) doesn't have these fields, hence querying with this field will yeild very less number of records.

+ Request (application/json)
  
    + Body
            
            {
                "search_query_json": {
                    "bool": {
                        "must": [
                            {
                                "query_string": {
                                    "default_field": "job_title",
                                    "query": "\"python developer\""
                                }
                            },
                            {
                                "query_string": {
                                    "default_field": "inferred_company_type",
                                    "query": "company"
                                }
                            }
                        ]
                    }
                }
            }


        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. The default value is 100
    + cursor (optional, string) - It is used for pagination when the number of records are more than 100. Please check the details in the introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'JSON' or 'xml'. This is an optional parameter with a default value of 'JSON'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)    

### Find all 'product manager' jobs from USA  [POST]

To find all the 'product manager' jobs from the United States, we can use `bool` query and join the 'product manager' query and 'United States' query with a `must` condition.


+ Request (application/json)
  
    + Body
            
    {
      "size": 50,
      "format": "json",
      "search_query_json": {
        "bool": {
          "must": [
            {
              "query_string": {
                "default_field": "job_title",
                "query": "\"product manager\""
              }
            },
            {
              "query_string": {
                "fields": [
                  "country",
                  "inferred_country"
                            ],
                            "query": "\"United States\" OR \"USA\" OR \"United States\" OR \"US\""
              }
            }
          ]
        }
      }
    }
      
        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)


### Find "Data Scientist" jobs from Australia or Newzealand [POST]

To find all the 'data scientist' jobs from Australia or New Zealand, we can use `bool` query and join the 'data scientist' query and 'Australia OR New Zealand' query with a `must` condition.

+ Request (application/json)
  
    + Body
            
    {
      "size": 50,
      "format": "json",
      "search_query_json": {
        "bool": {
          "must": [
            {
              "query_string": {
                "default_field": "job_title",
                "query": "\"data scientist\""
              }
            },
            {
              "query_string": {
                "fields": [
                  "country",
                  "inferred_country"
                            ],
                            "query": "\"Australia\" OR \"New Zealand\""
              }
            }
          ]
        }
      }
    }


        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)


### Find "Marketing Manager" jobs across United Kingdom, excluding London. [POST]

To get all the "marketing manager" jobs from UK excluding London, we should use `bool` query with combination of `must` and `must_not`, mentioning the title 
and the country in the `must` and mentioning the city in `must_not`

+ Request (application/json)
  
    + Body
            
    {
        "size": 50,
        "format": "json",
        "search_query_json": {
          "bool": {
            "must": [
              {
                "query_string": {
                  "default_field": "job_title",
                  "query": "\"marketing manager\""
                }
              },
              {
                "query_string": {
                  "fields": [
                    "country",
                    "inferred_country"
                  ],
                  "query": "\"United Kingdom\" OR \"England\" OR \"Scotland\" OR \"Northern Ireland\" OR \"Wales\" OR \"UK\" OR \"United Kingdom\""
                }
              }
            ],
            "must_not": [
              {
                "query_string": {
                  "fields": [
                    "city",
                    "inferred_city"
                  ],
                  "query": "\"London\""
                }
              }
            ]
          }
        }
      }


        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)


### Jobs with title manager, but excluding sales in both title and description [POST]

To get all the jobs with 'manager' in the title, but should have the keyword 'sales' in title or description, we can use `bool` query with a
combination of `must` and `must_not` as given in the previous example.

+ Request (application/json)
  
    + Body
            
    {
      "size": 50,
      "format": "json",
      "search_query_json": {
        "bool": {
          "must": [
            {
              "query_string": {
                "default_field": "job_title",
                "query": "\"manager\""
              }
            }
          ],
          "must_not": [
            {
              "query_string": {
                "fields": [
                  "job_title",
                  "job_description"
                            ],
                            "query": "sales"
              }
            }
          ]
        }
      }
    }


    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)


### Find all 'java developer' remote jobs  [POST]

To find all the 'java developer' remote jobs, we can use `bool` query and join the 'java developer' query and 'remote' query with a `must` condition.


+ Request (application/json)
  
    + Body
            
    {
      "size": 50,
      "format": "json",
      "search_query_json": {
        "bool": {
          "must": [
            {
              "query_string": {
                "default_field": "job_title",
                "query": "\"java developer\""
              }
            },
            {
              "query_string": {
                "default_field": "is_remote",
                "query": true
              }
            }
          ]
        }
      }
    }
      
        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)

### Find all jobs from 'manufacturing' department  [POST]

To find all the jobs from 'manufacturing' deparment, we can query for `inferred_department_name` to be 'manufacturing'.

Note: As of now we've have only a defined [set of department](#reference/departments-list)

+ Request (application/json)
  
    + Body
            
    {
      "size": 50,
      "format": "json",
      "search_query_json": {
        "query_string": {
          "default_field": "inferred_department_name",
          "query": "\"manufacturing\""
        }
      }
    }
      
        
    + Headers
    

                client_id: Replace with your client_id
                client_auth_key:  Replace with your client_auth_key

    
+ Attributes

    + size: 100  (optional,number) - number of records to be returned for this request. Can be any integer between 10 and 100. Default value is 100
    + cursor (optional,string) - It is used for pagination when number of records are more than 100. Please check the details in introduction section of API 
    + format: json (string) - Format of the response from API. It can be either 'json' or 'xml'. This is an optional parameter with a default value of 'json'
    + search_query_json - String, this is the heart of query and supports elasticsearch query-dsl. You may [find more details here](#introduction/frequently-asked-questions/where-can-i-get-more-details-about-search-query-json?)

    
+ Response 200 (application/json)

# Group Departments List

Following are the list of departments we recognize

- Agriculture
- Legal
- ScienceAndEnergy
- HR
- Education
- Marketing
- Publishing
- Facilities
- Internet
- Manufacturing
- Admin
- IT
- Sales
- Accounts
- Retail
- CustomerService
- ServiceAndSecurity
- Electrical
- Finance
- Travel
- Healthcare
- Hospitality
- RealEstate
- Restaurant
- ArtAndArchitecture